package thread_task_p;

import java.util.ArrayList;
import java.util.List;


/* 손님이 들어왔을 경우에 주방장이 일을 시작하며,
 * 손님의 인원수당 하나의 음식만 나가야 한다.
 * 주방장은 동시에 여러 음식을 조리할 수 없다.
 * */
public class Chef extends Thread{
	Restaurant rest;
	List<String> cookedMenu;
	boolean isCooking;
	int cookCnt;
	Foods<String, Integer, Integer> food;
	int debugint;
	
	
	public Chef(String name, Restaurant restaurant) {
		super(name);
		this.rest = restaurant;
		cookedMenu = new ArrayList<String>();
	}
	
	//쉐프 전용 음식 올려두기.
	synchronized public void putFood() {
		try {
			cooking();
			food =  rest.menu.get((int)(Math.random()*3));
			System.out.println(getName() + "이 음식("+food.foodName+") 만드는 중");
			sleep(food.cookingTime);

			//음식을 만들었는데 배식구에 음식이 있으면 넣지말고 탈출
			if(rest.thereIsDistribution = true) {
				debugint++;
				System.out.println("몇번 탈출 한거냐..." + debugint);
				return;
			}
		
			rest.distribution = food;
			rest.thereIsDistribution =  true; 
			
			
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}
		//여기에 무슨 음식이 올라갈 지 확인==>
	}
	
	synchronized public void cooking() {
		System.out.println(getName()+" 요리 시작");
		rest.joinConsumer = false;
	}
	
	@Override
	public void run() {
		int oper = rest.operTime/1000;
		
		
		System.out.println(getName()+ " 출근 했습니다.");
		//가게 문 닫을 때까지 강제 노동
		while(oper >= rest.current) {
			//동시에 음식을 만들지 않게 만들기 Sync로 안되서 만들어 봄;
			int ranSleep = (int)(Math.random()*500+500); 
			if(rest.joinConsumer) {
				if(!rest.thereIsDistribution) {
					try {
						sleep(ranSleep);
						//내가 조리한 음식이 있으면 그거 배식구에 넣고 다시 판단해
						if(this.food != null) {
							rest.distribution = food;
							rest.thereIsDistribution =  true; 
							cookedMenu.add(food.foodName);
							cookCnt++;
							this.food = null;
							continue;
						}
						//조리 시작한다.
						putFood();
						sleep(ranSleep);

						if(rest.distribution != null) {
							System.out.println("배식구의 음식 : "+rest.distribution.foodName);
						}
					} catch (InterruptedException e) {
					}
				}else {
					try {
						sleep(1000);
						System.out.println(getName()+" 배식구에 음식이 있어서 대기중 ");
					} catch (InterruptedException e) {
					}
				}
			}else {
				try {
					sleep(1000);
					System.out.println(getName()+": 대기중");
				} catch (InterruptedException e) {
				}
			}
			
			
		}
		
		//퇴근이 되었을 때!
		System.out.println("\n\n■□■□■□ 요리사 ■□■□■□");
		System.out.println(getName()+"이 만들었던 음식 총("+cookCnt+"개) ====>");
		for (String menu : cookedMenu) {
			System.out.println(menu);
		}
	}
	
	
	
	
}
