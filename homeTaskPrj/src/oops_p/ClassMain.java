package oops_p;

/*
 객체 지향 프로그래밍

    object oriented programming system (oops:객체 지향형 프로그래밍 시스템) 

  1. 개요: (현실의 객체를 반영한 )객체들을 조립/ 생성하여 프로그램을 작성 구현
객체 : 정의된 클래스를 기반으로 생성된 실체

  2. 장단점

    1) 상속을 통한 재사용과 시스템 확장 용이
    2) 코드의 재활용성이 높다
    3) 자연적 모델링에 의해 분석과 설계를 쉽고  효율적
    4) 사용자와 개발자 사이의 이해를 쉽게 
    5) 소프트 웨어 개발 및 유지보수가 용이
    6) 프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계 방법이 없다
    7) 구현시 처리시간이 지연
          

  3. 구성요소 
    1) 객체(인스턴스)
         — 속성(상태) , 연산(동작)을 결합시킨 실체
         - 데이터 구조와 그 위에서 수행되는 연산들을 가지고 있는 소프트웨어 모듈
         - 클래스를 기반으로 생성

         (1) 속성(멤버변수, 필드) : 한 클래스 내에 속한 객체들이 가지고 있는 데이터 값들을 단위별로 정의
                               성질, 분류, 식별, 수량 또는 현재 상태등을 표현
         (2) 메소드(동작) : 객체가 메시지를 받아 실행해야 할때 구체적인 연산을 정의하는 것
                             객체의 상태를 참조하거나 변경하는 수단 
    2) 클래스
         - 두개 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현하는 요소
          - 객체의 자료형 또는 타입을 의미
    3) 메세지
         - 객체들 간에상호작용을 하는데 사용되는 수단 객체의 메소들을 일으키는 외부의
           요구사항
         - 메시지를 받은 객체는 대응하는 연산을 수행하여 예상된 결과를 반환

  4. 특징: 상속, 다형성,  캡슐화
                추상화,  정보은닉


* 클래스 특성

1. 인스턴스란 
    정의 :   변수(데이터),  메소드   등을 하나의 형태로 처리해 놓은 묶음
          상태   +   동작          

    의의 : 객체 지향 프로그래밍을 하기 위한 기본 형태

 
2.  시작하는 클래스
      1. 반드시 파일명과 같은 클래스가 존재
      2. 클래스안에 main() 메소드가 존재
         public static void main(String[] args) 
         { 

           }
 3. 클래스 정의시  클래스정의명의 시작하는 글자는 대문자로 기재  :  Stud  (O)  , stud(x)
 
44.  클래스의 구성요소
 * 
  1)   멤버변수 : 클래스 내에서 접근하여 사용하는 변수
                       속성 값(상태)
         int a;    자료형, 배열, 클래스 ... 등 사용가능


  
  2)   메소드   :  일정한 작업이 가능한 프로세스,  프로세스를 실행하는 단위
                         ~~~을 하는 것(기능), 로직

     리턴형 메소드이름(자료형 매개변수1,자료형 매개변수2,...)
     {  //매개변수는 생략가능
  
     }
  
5.  같은 패키지안에 있는 클래스는 java 파일이 다르다 하더라도 접근이 가능하다

    때문에 같은 이름으로 같은 패키지안에 동일한 클래스를 선언할 수 없다.



클래스의 사용


1. 정의(클래스의 정의)  ::::> 설계도와 비슷

class 클래스명   ------ >                    class  갤럭시S6     :갤럭시 S6  는 이렇게 생겼어 (스펙)
  {                                           {
     멤버변수(필드);                                          카메라  전방카메라;

     메소드()                                             사진을찍어요()
    {                                                     {

     }                                                     }
  
  
  }                                            }

실제 :
class AAA
{
    int abc=3;
    void mmm()
    {
           System.out.println("메소드 mmm() 입니다.");
    }

     

        //  for(int i =0;i<10;i++) {
         //      ....
        //  }
     
       //클래스 메소드 내부에만 제어문 등 실행 코드를 넣을 수 있다.
        //클래스 정의 요소로 실행코드를 넣을 수 없다.
}

2. instance 변수 선언 (Stack 에 생성)


   클래스정의명  인스턴스변수명; 


   갤럭시S6    갤탱이;  ---------------->   난 갤럭시 S6 가 있어  난 그걸 갤탱이라고 불러


  실제


    AAA  a1;
   


3. 생성   (Heap 에 생성)


   변수명 = new 클래스생성자();  


 new 클래스생성자( );   ---> Heap 공간에 메모리 할당
   변수명은 동적할당된 주소를 받음


    갤탱이 = new 갤럭시S6( );       --------------> 이게(갤탱이) 갤럭시 S6 야(갤럭시 S6를 샀어)


    실제


    a1 = new AAA( );

4. 호출


    인스턴스변수명.멤버변수  ,   인스턴스변수명.메소드

    변수명.멤버요소;    ------------------------------->  갤탱이로 사진을 찍어


    갤탱이.전방카메라
    갤탱이.사진을찍어요(  );


     System.out.println(a1.abc);      --> 멤버변수의 접근  :::>   3


      a1.mmm(  );                      --> 메소드의 접근     ::::::::::::::::::::::::::::> 메소드 mmm() 입니다.
     
 * */


// 클래스 정의 ---- 1
class AAA{
	
	//멤버변수
	int a = 10;
	String b = "아기상어";
	boolean c = true;
	
	//메소드
	void meth_1() {
		System.out.println("AAA meth_1() 입니다.");
	}
	
	void meth_2() {
		System.out.println("AAA meth_2() 입니다.");
	}
}



public class ClassMain {

	public static void main(String[] args) {

		AAA a1;	//인스턴스 변수 선언 ---- 2
		
		//System.out.println(a1);
		
		a1 = new AAA();	//인스턴스 생성 및 대입 ---3
		AAA a2 = new AAA();
		
		
		System.out.println(a1);
		System.out.println(a1.a); //인스턴스 멤버요소 호출 --- 4
		a1.meth_1();
		
		System.out.println("a1 : "+a1.a+","+a1.b+","+a1.c);
		System.out.println("a2 : "+a2.a+","+a2.b+","+a2.c);
		
		a1.a = 20;
		a2.b = "엄마상어";
		
		System.out.println("a1 : "+a1.a+","+a1.b+","+a1.c);
		System.out.println("a2 : "+a2.a+","+a2.b+","+a2.c);
	}

}
